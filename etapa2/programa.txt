var a := inteiro ,
var b := decimal ,

foo -> inteiro com p := inteiro := [
  retorna p := inteiro
] ,

func -> inteiro p := inteiro := [
  retorna p := inteiro
] ,

f -> inteiro := [
  var x := inteiro
  x := 0
  retorna x := inteiro
] ,

soma -> inteiro com x := inteiro, y := inteiro := [
  var r := inteiro
  r := x + y
  retorna r := inteiro
] ,

teste_if -> inteiro := [
  se(1) [
    var t := inteiro com 1
  ] senao [
    var u := inteiro com 0
  ]
  retorna 1 := inteiro
] ,

teste_if_sem_else -> inteiro := [
  se(1) [
    var t := inteiro com 1
  ]
  retorna 1 := inteiro
] ,

loop -> inteiro := [
  var i := inteiro com 0
  enquanto(i < 3) [
    i := i + 1
  ]
  retorna i := inteiro
] ,

expr -> inteiro com a := inteiro, b := inteiro, c := inteiro, d := inteiro, e := inteiro, f := inteiro,
                  g := inteiro, h := inteiro, i := inteiro, j := inteiro, k := inteiro, l := inteiro,
                  m := inteiro, n := inteiro, p := inteiro, q := inteiro, r := inteiro := [
  var z := inteiro
  z := a | b & c == d != e < f <= g > h >= i + j - k * l / m % n + +p - -q == !r
  retorna z := inteiro
] ,

caller -> inteiro := [
  foo()                // chamada como comando (sem usar o retorno)
  foo(1)               // chamada com 1 argumento
  retorna 0 := inteiro
] ,

main -> inteiro := [
  var x := inteiro com 1
  var y := inteiro com 2

  // chamada de função como expressão (em atribuição):
  x := soma(x, y)

  // chamadas como comando (resultado ignorado):
  teste_if()
  loop()
  expr(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0)

  // if/else e while já exercitados nas outras funções; aqui só finaliza:
  retorna x := inteiro
]
;
